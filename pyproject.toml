[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ml-ecolyzer"
dynamic = ["version"]
description = "Machine Learning Environmental Impact Analysis Framework"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Jose Marie Antonio Minoza"},
    {name = "Rex Gregor Laylo"},
    {name = "Christian Villarin"},
    {name = "Sebastian Ibanez"},
    {name = "Center for AI Research PH", email = "contact@cair.ph"}
]
keywords = [
    "machine-learning", "ml", "environmental-impact", "carbon-emissions", 
    "sustainability", "pytorch", "huggingface", "benchmarking"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Monitoring",
    "Topic :: Software Development :: Testing",
    "Environment :: Console",
    "Environment :: GPU :: NVIDIA CUDA",
]
dependencies = [
    "torch>=1.9.0",
    "transformers>=4.20.0",
    "datasets>=2.0.0",
    "codecarbon>=2.0.0",
    "wandb>=0.13.0",
    "numpy>=1.21.0",
    "psutil>=5.8.0",
    "diffusers>=0.10.0",
    "evaluate>=0.3.0",
    "sacrebleu>=2.0.0",
    "pandas>=1.3.0",
    "tqdm>=4.60.0",
    "pyyaml>=5.4.0",
    "click>=8.0.0",
    "rich>=12.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "isort>=5.0",
    "mypy>=0.900",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.15",
    "sphinx-autodoc-typehints>=1.12",
]
gpu = [
    "nvidia-ml-py3>=7.352.0",
    "pynvml>=11.0.0",
]
audio = [
    "librosa>=0.8.0",
    "soundfile>=0.10.0",
    "jiwer>=2.0.0",
]
vision = [
    "opencv-python>=4.5.0",
    "pillow>=8.0.0",
]
all = [
    "nvidia-ml-py3>=7.352.0",
    "pynvml>=11.0.0",
    "librosa>=0.8.0",
    "soundfile>=0.10.0",
    "jiwer>=2.0.0",
    "opencv-python>=4.5.0",
    "pillow>=8.0.0",
]

[project.urls]
Homepage = "https://github.com/ml-ecolyzer/ml-ecolyzer"
Repository = "https://github.com/ml-ecolyzer/ml-ecolyzer"
Documentation = "https://ml-ecolyzer.readthedocs.io"
"Bug Reports" = "https://github.com/ml-ecolyzer/ml-ecolyzer/issues"
"Paper" = "https://arxiv.org/abs/xxxx.xxxxx"

[project.scripts]
mlecolyzer = "mlecolyzer.cli.main:main"
ml-ecolyzer = "mlecolyzer.cli.main:main"
mlecolyzer-research = "mlecolyzer.cli.main:research_main"

[tool.setuptools_scm]
write_to = "mlecolyzer/_version.py"

[tool.setuptools.packages.find]
include = ["mlecolyzer*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
mlecolyzer = ["*.yaml", "*.yml", "*.json", "configs/**/*"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["mlecolyzer"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]